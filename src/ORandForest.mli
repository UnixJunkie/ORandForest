
(******************************************************************************
 * ORandForest
 * A pure OCaml implementation of a random forest classifier based on OC4.5.
 *
 * By Théophile Bastian <contact@tobast.fr>
 * and Noémie Fong (aka. Minithorynque), 2016.
 ******************************************************************************
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************)

module Make(X: Oc45.S) : sig
	type randomForest
	(** Stores a random forest generated by {!genRandomForest} *)

	val classify : randomForest -> X.data -> X.category
	(** Classifies a new data vector, relying on the informations from the
	given random forest (generated by {!genRandomForest}), yielding a
	category. *)

	val genRandomForest : int -> X.trainSet -> randomForest
	(** [genRandomForest nbTrees trainSet] generates a random forest of
	[nbTrees] trees, based on [trainSet]. *)
end

(* What's the correct syntax for that?
module IntRandForest : Make(Oc45.IntOc45) *)

